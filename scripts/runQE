#!/usr/bin/env python

'''Script used to generate input file for a geometry optimization Quantum
Espresso NB: should be run in the appropriate directory'''

from asetools import get_template
from string import Template
import os
from argparse import ArgumentParser

def main():

    parser = ArgumentParser(usage='Script used to run an espresso calculation.')

    parser.add_argument('-i', '--input',
                        default='startguess.traj',
                        help='Name and (relative) path of input file. Default=startguess.traj')
    parser.add_argument('-n', '--ncpus',
                        default='16',
                        help='Requested number of cores. Default=16')
    parser.add_argument('--kpts',
                        default='gamma',
                        help='Definition of kpts spanning the Brillouin zone. Default=gamma (special qe trick compared to (1,1,1))')
    parser.add_argument('--sigma',
                        default='0.1',
                        help='Fermi smearing, sigma. Default=0.1')
    parser.add_argument('--xc',
                        default='BEEF-vdW',
                        help='Exchange Correlation functional. Default=BEEF-vdW')
    parser.add_argument('--grimme',
                        action="store_true",
                        default=False,help='Turn on Grimme DFT-D2 dispersion correction.')
    parser.add_argument('--pw',
                        default='500',
                        help='Planewave energy cutoff. Default value: 500 eV')
    parser.add_argument('--dw',
                        default='7000',
                        help='Planewave energy cutoff. Default value: 7000 eV')
    parser.add_argument('--magmoms',
                        default='',
                        help='Provide a list of initial magnetic moments of the form \'(atomid,magmom),...\'. Default=\'\', i.e. non-spinpolarized calculation.')
    parser.add_argument('--fmax',
                        default=0.03,help='Force threshold. Default=0.03 eV/AA.')
    parser.add_argument('--molecule',
                        action="store_true",
                        default=False,
                        help='If true, builds cell around input molecule wih 7.5 AA vacuum in all directions. Also sets force threshold=0.01 eV/AA. Default: False.')
    parser.add_argument('--opt',
                        action="store_true",
                        default=False,
                        help='If true, run geometry optimization. Default: False (i.e single point).')
    parser.add_argument('--native',
                        action="store_true",
                        default=False,
                        help='Runs internal espresso routines, instead of through the ase-espresso interface')
    parser.add_argument('--dryrun',
                        action="store_false",
                        default=True,
                        help='Do not submit job.')

    args = parser.parse_args()

    spinpol = False
    if args.magmoms: #initial magmoms are set; turn on spin-polarized calculation
        spinpol = True
    extralines = ''
    if args.molecule:
        extralines = 'smart_cell(atoms,vac=7.5,h=0.01) #create cell with equal vacuum spacing of vac Aa in all directions. NB! grid spacing parameter h only matters for a real-space code!'
        args.fmax = 0.01
    print args

    # Import the template into a template object.
    nativemode = 'scf'
    if args.native:
        tname = 'QEnative_template.py'
        if args.opt:
            nativemode = 'bfgs'
    elif args.opt:
        tname = 'QEopt_template.py'
    else:
        tname = 'QEsingle_template.py'
    if args.grimme:
        vdw = '\'dft-d\''
    else:
        vdw = None

    template = Template(get_template(tname))

    with open('input.py', 'w') as finp:
        finp.write(template.substitute(vars(args)))

#            xc=args.xc, vdw=vdw, pw=args.pw,
#                                       dw=args.dw, kpts=args.kpts,
#                                       sigma=args.sigma, spinpol=spinpol,
#                                       mode=nativemode, idxs=args.magmomidxs,
#                                       readpath=args['readpath'], fmax=args.fmax,
#                                       extralines=extralines))

    nativeflag = ' '
    if args.native:
        os.system('python input.py')
        nativeflag = ' --native '
    if args.submit:
        os.system('submitQE -n '+args.n_cpu+nativeflag+args[0])

if __name__ == "__main__":
    main()
