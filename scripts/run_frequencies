#!/usr/bin/env python
#Script used to run a frequency calculation
from sys import argv,exit
from string import Template
from ase.io import read,write
import os
from optparse import OptionParser
from mypython import mymkdir

parser = OptionParser(usage='Script used to run a frequency calculation.')

parser.add_option('--native', action="store_true", dest='nativeQE',default=False,help='Runs internal espresso routines, instead of through the ase-espresso interface')
parser.add_option('--IR', action="store_true", dest='IR',default=False,help='Calculate IR intensities. Only possible if --native specified.')
parser.add_option('--grimme',action="store_true",dest='grimme',default=False,help='Turn on Grimme DFT-D2 dispersion correction.')
parser.add_option('-d','--dir', dest='outdir',default=os.getcwd()+'/Frequencies',
                  help='choose output directory (will be made if not present)')
parser.add_option('-i','--input', dest='readname',default='../../dyn.traj',
                  help='Name and (relative) path of input file')
parser.add_option('--indices',dest='indices',default='[]',help='Indices of atoms to be displaced. Default: all indices')
parser.add_option('-n','--ncpus', dest='n_cpu',default='16',
                  help='Requested number of cores. Default=16')
parser.add_option('-m','--method',dest='method',default='standard',help='Method used in summary(),eg. frederiksen')
parser.add_option('--delta',dest='delta',default='0.005',help='Displacement (in Aa) used for numerical differentiation. Default=0.005 Aa')
parser.add_option('--kpts',dest='kpts',default='\'gamma\'',help='Definition of kpts spanning the Brillouin zone. Default=gamma (special qe trick compared to (1,1,1))')
parser.add_option('--sigma',dest='sigma',default='0.1',help='Fermi smearing, sigma. Default=0.1')
parser.add_option('--nfree',dest='nfree',default=2,help='Number of displacement steps used in numerical differentiation. Default=2')
parser.add_option('--xc',dest='xc',default='BEEF-vdW',help='Exchange Correlation functional. Default=BEEF-vdW')
parser.add_option('--cutoff',dest='pw',default='500',help='Planewave energy cutof. Default value: 500 eV')
parser.add_option('--dcutoff',dest='dw',default='7000',help='Planewave energy cutof. Default value: 7000 eV')
parser.add_option('--magmoms',dest='magmomidxs',default='',help='Provide a list of initial magnetic moments of the form \'(atomid,magmom),...\'. Default=\'\', i.e. non-spinpolarized calculation.')
parser.add_option('--thermo',dest='thermo',default='HarmonicXDfree',help='Do calculation of thermochemistry? Possible values: IdealGas,HarmonicXDfree,None. Default: HarmonicXDfree')

(options,args) = parser.parse_args()
#args[0] is time
spinpol=False
if options.magmomidxs: #initial magmoms are set; turn on spin-polarized calculation
     spinpol = True
if options.grimme:
   vdw = '\'dft-d\''
else:
   vdw = None

cwddir = os.getcwd()
tpath = os.getenv('TEMPLATESPATH')
nativeflag = '' #will contain --native flag if requested

if options.nativeQE: #prepare for native espresso phonon calculation
  nativeflag = '--native'
  print 'NB! turning on fixed occupations (sigma=0.0). Make sure you have confirmed equivalence in scf energies between this and the non-restricted case'
  options.sigma = '0.0'
  calcdir = options.outdir+'/qe_native'
  mymkdir(calcdir)
  os.chdir(calcdir)
  if spinpol:
        spinpol = 'True, fix_magmom=True'
  if options.kpts == '\'gamma\'':
	#print 'Changing gamma point to (1,1,1)'
	options.kpts = '(1,1,1)' #gamma point trick cannot be used in phonon calculation
  pwcalc = 'QEinitcalc_template.py'
  phcalc = 'ph_template.py'
  f = open(tpath + pwcalc,'r')
  templ_pwcalc = Template(f.read())
  f.close()
  f = open(tpath + phcalc,'r')
  templ_phcalc = Template(f.read())
  f.close()

  f = open('input.py','w')
  f.write(templ_pwcalc.substitute(readpath=options.readname,vdw=vdw,pw=options.pw,dw=options.dw,xc=options.xc,sigma=options.sigma,spinpol=spinpol,idxs=options.magmomidxs,kpts=options.kpts,mode='scf',fmax='0.03',extralines='')) #fmax is not used in freq calcs
  f.close()
  os.system('python input.py')#;rm input.py')

  indices = options.indices.translate(None,'[]').replace(' ','').replace(',',' ')
  nat_todo = ''
  extralines = ''
  if len(indices) > 0:
     print indices
     nat_todo='nat_todo=%d,' % len(indices.split(' '))
     extralines = 'nogg=.true.,\n'
  if options.IR:
	extralines = extralines+'  zue=.true,\n  epsil=.true.,\n  trans=.true.'
  f = open('ph.inp','w')
  f.write(templ_phcalc.substitute(nat_todo=nat_todo,indices=indices,extralines=extralines))
  f.close()
  f = open('dynmat.inp','w')
  if options.thermo == 'IdealGas':
	asr='zero-dim'
  else:
	asr='crystal'
  f.write('&input fildyn=\'dynmat.dat\' asr=\'%s\', /' % asr)
  f.close()

else: #prepare for ASE style frequency calculation
  if options.thermo == 'IdealGas':
     templatename = 'vibrationIdealGas_template.py'
  elif options.thermo == 'HarmonicXDfree':
     templatename = 'vibrationHarmonicXDfree_template.py'
  elif options.thermo == 'None':
     templatename = 'vibration_template.py'
  else:
     print 'Thermo option \'%s\' not supported. Try -h option for help.' % options.thermo
     exit()
  calcdir = options.outdir+'/delta_'+options.delta
  mymkdir(calcdir)
  os.chdir(calcdir)
  f = open(tpath+templatename,'r')
  template = Template(f.read())
  f.close()
  f = open('input.py','w')
  f.write(template.substitute(indices=options.indices,readpath=options.readname,method=options.method,delta=options.delta,nfree=options.nfree,vdw=vdw,pw=options.pw,dw=options.dw,xc=options.xc,sigma=options.sigma,spinpol=spinpol,idxs=options.magmomidxs,kpts=options.kpts))
  f.close()

submstring = 'submitQE %s -n %s' % (nativeflag,options.n_cpu)+' '+args[0]

print options
print submstring
os.system(submstring)
os.chdir(cwddir)
