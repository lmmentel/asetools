# -*- coding: utf-8 -*-

import argparse
import numpy as np
import os
import sys

from ase import units
from ase.calculators.singlepoint import SinglePointCalculator
from ase.io.espresso import make_atoms
from ase.io.trajectory import TrajectoryWriter

def parsepwlog(fileobj):
    '''
    Parse Quantum Espresso PWSCF log file into a set of atoms objects
    corresponding to single point calculations.

    Args:
      fileobj : file or str
        Either file object or name of the file as string

    Returns:
      images : list of Atoms instances
        List of parsed Atoms instances corresponding to single point calculations
    '''

    if isinstance(fileobj, str):
        fileobj = open(fileobj, 'rU')

    contents = fileobj.read()

    images = []
    for singlelog in contents.split('Program PWSCF')[1:]:
        images.append(read_espresso_out(singlelog))

    return images

def read_espresso_out(logstring, index=-1):
    '''
    Reads quantum espresso output text files.

    .. note:
       This is a modified version of the file form ase/io/espresso.py

    Args:
      logstring : str
        A string with a the output of a single point Quantum Espresso PWSCF
        calculation.
    '''

    lines = logstring.split('\n')
    images = []

    # Get unit cell info.
    bl_line = [line for line in lines if 'bravais-lattice index' in line]
    if len(bl_line) != 1:
        raise NotImplementedError('Unsupported: unit cell changing.')
    bl_line = bl_line[0].strip()
    brav_latt_index = bl_line.split('=')[1].strip()
    if brav_latt_index != '0':
        raise NotImplementedError('Supported only for Bravais-lattice '
                                  'index of 0 (free).')
    lp_line = [line for line in lines if 'lattice parameter (alat)' in
               line]
    if len(lp_line) != 1:
        raise NotImplementedError('Unsupported: unit cell changing.')
    lp_line = lp_line[0].strip().split('=')[1].strip().split()[0]
    lattice_parameter = float(lp_line) * units.Bohr
    ca_line_no = [number for (number, line) in enumerate(lines) if
                  'crystal axes: (cart. coord. in units of alat)' in line]
    if len(ca_line_no) != 1:
        raise NotImplementedError('Unsupported: unit cell changing.')
    ca_line_no = int(ca_line_no[0])
    cell = np.zeros((3, 3))
    for number, line in enumerate(lines[ca_line_no + 1: ca_line_no + 4]):
        line = line.split('=')[1].strip()[1:-1]
        values = [eval(value) for value in line.split()]
        cell[number, 0] = values[0]
        cell[number, 1] = values[1]
        cell[number, 2] = values[2]
    cell *= lattice_parameter

    # Find atomic positions and add to images.
    for number, line in enumerate(lines):
        key = 'Begin final coordinates'  # these just reprint last posn.
        if key in line:
            break
        key = 'Cartesian axes'
        if key in line:
            atoms = make_atoms(number, lines, key, cell)
            images.append(atoms)
        key = 'ATOMIC_POSITIONS (crystal)'
        if key in line:
            atoms = make_atoms(number, lines, key, cell)
            images.append(atoms)
    return images[index]

if __name__ == "__main__":

    parser = argparse.ArgumentParser()
    parser.add_argument('log', help='Quantum Espresso log file')
    parser.add_argument('-o', '--output', help='Output trajectory file')
    args = parser.parse_args()

    images = parsepwlog(args.log)

    if args.output:
        if os.path.splitext(args.output)[1].lower() != '.traj':
            trajname = args.output + '.traj'
        else:
            trajname = args.output
    else:
        trajname = os.path.splitext(args.log)[0] + '.traj'

    print 'Writing trajectory file to: {}'.format(trajname)
    traj = TrajectoryWriter(trajname, mode='a')
    for atoms in images:
        traj.write(atoms=atoms)

